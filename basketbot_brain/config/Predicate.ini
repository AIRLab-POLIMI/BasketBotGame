EnemyMedium		= (D PlayerDistance MEDIUM);
EnemyFar		= (D PlayerDistance FAR);
EnemyNear		= (D PlayerDistance NEAR);
PlayerLeft		= (D PlayerOrientation LEFT);
PlayerRight		= (D PlayerOrientation RIGHT);
PlayerFront		= (D PlayerOrientation FRONT);
PlayerRear		= (OR (D PlayerOrientation REAR1) (D PlayerOrientation REAR2) );

PlayerApproaching = (D PlayerVelocityX APPROACHING);
PlayerEscaping = (D PlayerVelocityX ESCAPING);
PlayerRunningClockwise = (D PlayerVelocityY CLOCKWISE);
PlayerRunningCounterclockwise = (D PlayerVelocityY COUNTERCLOCKWISE);

DebugFlag  		= (D DebugFlag T);

SuggestionAvailable = (NOT (AND (D SuggestedAngularSpeed NONE) (D SuggestedLinearSpeed NONE)) );
SuggestedForward = (D SuggestedLinearSpeed FORWARD);
SuggestedBackward = (D SuggestedLinearSpeed BACKWARD);
SuggestedLinearSteady = (D SuggestedLinearSpeed STEADY);
SuggestedLeft = (D SuggestedAngularSpeed COUNTERCLOCKWISE);
SuggestedRight = (D SuggestedAngularSpeed CLOCKWISE);
SuggestedAngularSteady = (D SuggestedAngularSpeed STEADY);

PlayerVisible =  (D Unreliability VISIBLE);
PlayerNotVisible = (D Unreliability NOTVISIBLE);
PlayerLost = (D Unreliability LOST);

RobotMovingForward = (D RobotLinearSpeed FORWARD);
RobotMovingBackward =(D RobotLinearSpeed BACKWARD);
RobotRotatingLeft = (D RobotAngularSpeed COUNTERCLOCKWISE);
RobotRotatingRight =(D RobotAngularSpeed CLOCKWISE);

Frozen = (D RobotStatus FROZEN);
SearchLeft = (D RobotStatus SEARCH_LEFT);
SearchRight = (D RobotStatus SEARCH_RIGHT);
Normal = (D RobotStatus NORMAL);

ObstacleLeft = (D ObstacleLeft NEAR);
ObstacleRight = (D ObstacleRight NEAR);
ObstacleFront = (D ObstacleFront NEAR);
ObstacleFrontLeft = (D ObstacleFrontLeft NEAR);
ObstacleFrontRight = (D ObstacleFrontRight NEAR);
ObstacleRear = (D ObstacleRear NEAR);
ObstacleRearLeft = (D ObstacleRearLeft NEAR);
ObstacleRearRight = (D ObstacleRearRight NEAR);

ObstacleNear =
    (OR
     (OR
      (OR (D ObstacleLeft NEAR) (D ObstacleRight NEAR))
      (OR (D ObstacleFrontLeft NEAR) (D ObstacleFrontRight NEAR))
     )
     (OR
      (OR (D ObstacleRearLeft NEAR) (D ObstacleRearRight NEAR))
      (OR (D ObstacleFront NEAR) (D ObstacleRight NEAR))
     )
    );

DangerAhead = (D ObstacleFront DANGER);
DangerBehind = (D ObstacleRear DANGER);
ObstacleDanger =
    (OR
     (OR
      (OR (D ObstacleLeft DANGER) (D ObstacleRight DANGER))
      (OR (D ObstacleFrontLeft DANGER) (D ObstacleFrontRight DANGER))
     )
     (OR
      (OR (D ObstacleRearLeft DANGER) (D ObstacleRearRight DANGER))
      (OR (D ObstacleFront DANGER) (D ObstacleRight DANGER))
     )
    );

ElapsedOne = (D StateElapsed ONE_OR_MORE);